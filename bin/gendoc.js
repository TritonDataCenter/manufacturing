/*
 * Copyright 2014 Joyent, Inc.  All rights reserved.
 */

var path = require('path');
var partsdb = require('../lib/partsdb');
var extsprintf = require('extsprintf');

var fmt = extsprintf.sprintf;

var db;
var conf = {
	defmfg: 'joyent',
	dbdir: process.argv[2]
};

var w = function () {
	return (process.stdout.write(fmt.apply(fmt, arguments), 'utf-8'));
};

function
_link_part(p, full)
{
	var pn;
	var str;

	pn = p.pn();
	str = (full) ? pn.toString() : pn.rootString();

	return (fmt('<a href="#%s">%s</a>', p.pn().rootString(), str));
}

function
display_name(p)
{
	var alias = p.alias();
	var desc = p.desc();

	if (alias)
		return (fmt('%s [%s]', alias, desc));
	return (desc);
}

function
display_dashroll(p)
{
	var dr = p.pn().dashroll();

	if (dr !== null)
		return (fmt('%02d', dr));

	return ('N/A');
}

function
display_rev(p)
{
	if (p.is_3p())
		return ('N/A');

	return (fmt('%02d', p.rev()));
}

function
dump_tree(p, level)
{
	p.constituents().forEach(function (def) {
		var i;
		var c = def.part;

		for (i = 0; i < 3; i++) {
			if (i === level) {
				w('|| %d ', def.qty);
			} else {
				w('|| ');
			}
		}

		w('|| %s || %s || %s || %s ||\n',
		    _link_part(c, true), c.mfg().title(), c.mfgpn() || 'N/A',
		    c.desc());
		dump_tree(c, level + 1);
	});
}

function
display_refs(p)
{
	var s = '';
	var refs = p.refs();

	if (refs.length === 0)
		return ('N/A');

	refs.forEach(function (r) {
		s += fmt('<a href="%s">%s</a> ', r.uri, r.title);
	});

	return (s);
}

db = partsdb.create(conf);

w('<!-- DO NOT EDIT THIS FILE! It is automatically generated by %s -->\n\n',
    path.basename(process.argv[1]));

w('# Top-Level Systems\n');
db.forEachPart(function (p) {
	if (p.dependents().length !== 0)
		return;

	w('### %s\n', display_name(p));
	w('**Description**: %s\n\n', p.desc());
	w('|| **Qty** || || || **Part Number** || **Manufacturer** ' +
	    '|| **Mfg. Part Number** || **Description** ||\n');
	dump_tree(p, 0);
	w('\n');
});
w('\n');

w('# Tabular Parts Listing\n');
w('|| **Part Number** || **Current Dashroll** || **Rev** || **Manufacturer** ' +
    '|| **Mfg. Part Number** || **Reference** || **Description** ||\n');
db.sortParts().forEach(function (p) {
	w('|| %s || %s || %s || %s || %s || %s || %s ||\n',
	    _link_part(p, false), display_dashroll(p), display_rev(p),
	    p.mfg().title(), p.mfgpn() || 'N/A', display_refs(p), p.desc());
});
w('\n');

w('# Individual Parts Catalogue\n');
db.sortParts().forEach(function (p) {
	w('### %s\n', p.pn().rootString());
	w('* **Dashroll**: %s\n', display_dashroll(p));
	w('* **Revision**: %s\n', display_rev(p));
	w('* **Manufacturer**: %s\n', p.mfg().title());
	w('* **Manufacturer Part Number**: %s\n', p.mfgpn() || 'N/A');
	w('* **Description**: %s\n', p.desc());
	w('* **Short Description**: %s\n', p.alias() || 'N/A');
	w('* **References**: %s\n', display_refs(p));
	if (p.constituents().length > 0) {
		w('* **First-Level Contents**:\n');
		p.constituents().forEach(function (def) {
			w('\t* qty %d %s\n',
			    def.qty, _link_part(def.part, true));
		});
	}
	w('\n');
});
w('\n');

function
dump_dependents(p)
{
	p.dependents().forEach(function (c) {
		w('* %s\n', _link_part(c, false));
		dump_dependents(c);
	});
}

w('# Dependents on Each Part\n');
db.sortParts().forEach(function (p) {
	w('### Dependents on %s\n', p.pn().toString());
	dump_dependents(p);
	w('\n');
});
w('\n');

w('# Parts by Manufacturer\n');
db.forEachManufacturer(function (m) {
	var mfp = db.filterParts(function (p) {
		return (m === p.mfg());
	});

	w('### %s\n', m.title());

	mfp.forEach(function (p) {
		w('* %s\n', _link_part(p, true));
	});

	w('\n');
});
w('\n');
